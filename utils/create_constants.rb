
OTHER = %w(

SQL_SUCCESS SQL_SUCCESS_WITH_INFO SQL_INVALID_HANDLE SQL_STILL_EXECUTING
SQL_ERROR SQL_NO_DATA_FOUND SQL_NULL_DATA


SQL_HANDLE_ENV SQL_HANDLE_DBC SQL_HANDLE_STMT SQL_HANDLE_DESC

SQL_NULL_HANDLE SQL_NULL_HENV SQL_NULL_HDBC SQL_NULL_HSTMT SQL_NULL_HDESC


SQL_NO_NULLS SQL_NULLABLE

SQL_COMMIT SQL_ROLLBACK

SQL_TRUE SQL_FALSE

SQL_MAX_DSN_LENGTH

SQL_BIGINT SQL_BLOB SQL_BLOB_LOCATOR SQL_CHAR SQL_BINARY SQL_CLOB
SQL_CLOB_LOCATOR SQL_TYPE_DATE SQL_DBCLOB SQL_DBCLOB_LOCATOR
SQL_DECIMAL SQL_DOUBLE SQL_FLOAT SQL_GRAPHIC SQL_INTEGER
SQL_LONGVARCHAR SQL_LONGVARBINARY SQL_LONGVARGRAPHIC SQL_NUMERIC
SQL_REAL SQL_SMALLINT SQL_TYPE_TIME SQL_TYPE_TIMESTAMP SQL_VARCHAR
SQL_VARBINARY SQL_VARGRAPHIC

SQL_FETCH_NEXT SQL_FETCH_PRIOR SQL_FETCH_RELATIVE SQL_FETCH_ABSOLUTE
SQL_FETCH_FIRST SQL_FETCH_LAST SQL_FETCH_BOOKMARK

SQL_CLOSE SQL_DROP SQL_UNBIND SQL_RESET_PARAMS

)


SQL_DESC = %w(
AUTO_UNIQUE_VALUE CASE_SENSITIVE CATALOG_NAME COUNT DISPLAY_SIZE LABEL
DISTINCT_TYPE OCTET_LENGTH FIXED_PREC_SCALE NAME NULLABLE SCHEMA_NAME
PRECISION SCALE SEARCHABLE TABLE_NAME TYPE TYPE_NAME UNSIGNED UPDATABLE
BASE_COLUMN_NAME BASE_TABLE_NAME CONCISE_TYPE LENGTH LITERAL_PREFIX
LITERAL_SUFFIX LOCAL_TYPE_NAME NUM_PREC_RADIX UNNAMED
).collect {|i| "SQL_DESC_#{i}"} 




CONSTANTS = OTHER + SQL_DESC


File.open("constants.h", "w+") {|f|
  CONSTANTS.each {|c|
    f.puts %{rb_define_const(mDB2CLI, "#{c}", INT2NUM(#{c}));}
  }
  f.puts
} 


